import {
  BETA_PER_YEAR,
  EPOCH_DURATION_IN_YEARS,
  SLOTS_IN_EPOCH,
} from '../constants';
import { getFirstSlotOfEpoch, slotToEpoch } from '../utils';
import { decay } from './decay';

// Returns the potential mana generated by holding value tokens from creationSlot to consumptionSlot
export function getPotentialMana(
  value: number,
  creationSlot: number,
  consumptionSlot: number,
  generationRate: number,
): number {
  const creationEpoch = slotToEpoch(creationSlot);
  const consumptionEpoch = slotToEpoch(consumptionSlot);

  const epochsLeftToConsumption = consumptionEpoch - creationEpoch;

  const slotAfterCreationEpoch = getFirstSlotOfEpoch(creationEpoch + 1);
  const firstSlotConsumptionEpoch = getFirstSlotOfEpoch(consumptionEpoch);

  const d1 = slotAfterCreationEpoch - creationSlot;
  const d2 = consumptionSlot - firstSlotConsumptionEpoch;

  let potentialMana = 0;
  if (epochsLeftToConsumption == 0) {
    potentialMana = value * (consumptionSlot - creationSlot) * generationRate;
  } else if (epochsLeftToConsumption == 1) {
    potentialMana =
      value * d2 * generationRate + decay(value * d1 * generationRate, 1);
  } else {
    const c =
      Math.exp(-BETA_PER_YEAR * EPOCH_DURATION_IN_YEARS) /
      (1 - Math.exp(-BETA_PER_YEAR * EPOCH_DURATION_IN_YEARS));
    const aux = value * generationRate * c * SLOTS_IN_EPOCH;
    const potentialMana_n = decay(
      value * d1 * generationRate,
      epochsLeftToConsumption,
    );
    const potentialMana_n_1 = decay(aux, epochsLeftToConsumption - 1);
    const potentialMana_0 = value * d2 * generationRate + aux;
    potentialMana = potentialMana_n - potentialMana_n_1 + potentialMana_0;
  }
  return potentialMana;
}
